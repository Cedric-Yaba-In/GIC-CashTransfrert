🧭 Objectif de l’application

L’application permet à un utilisateur d’envoyer de l’argent d’un pays A vers un pays B, sans obligation de créer un compte, et sans envoie réel de l'argent. 
Il remplit simplement un formulaire d’envoi avec les informations de l’expéditeur et du destinataire. 
Le système détecte automatiquement les moyens de paiement disponibles dans les deux pays, et propose des options de paiement.

L’administration peut ensuite valider ou rejeter la demande. Une fois validée, le transfert est automatiquement exécuté selon le moyen choisi (API, manuel, Flutterwave, etc.).
🧩 Fonctionnalités détaillées
1. Formulaire de transfert sans compte

    Formulaire de l’expéditeur : nom, pays, email, téléphone.

    Formulaire du destinataire : nom, pays, moyen de réception, téléphone, email (facultatif).

    Le système affiche les moyens de paiement disponibles en fonction des pays sélectionnés.

    Génération d'une référence de transaction unique.

    L’utilisateur effectue son paiement en fonction du moyen disponible :

        Si API (ex: Flutterwave) → bouton de paiement automatique.

        Si manuel (virement bancaire) → bouton "J’ai effectué le paiement".

2. Validation et exécution

    Un administrateur accède à une interface de traitement.

    Il peut approuver (ce qui exécute automatiquement le transfert selon l’API ou moyen manuel) ou rejeter (email envoyé à l’expéditeur pour notifier).

    Historique des décisions pour audit.

3. Gestion des wallets
a. Wallet par pays

    Chaque pays dispose d’un wallet général représentant le solde cumulé.

b. Sous-wallets par moyen de paiement

    Chaque wallet général contient plusieurs sous-wallets selon les moyens disponibles dans le pays (Mobile Money, Flutterwave, Virement…).

    Les sous-wallets peuvent être crédités/débités manuellement par un administrateur pour refléter les mouvements réels.

4. Affichage dynamique des disponibilités

    Lorsque l’utilisateur saisit un montant, le système affiche les moyens de paiement disponibles en fonction :

        Du pays sélectionné.

        De la disponibilité dans le sous-wallet.

        Des règles (min/max, actifs/inactifs).

5. Facture automatique et consultation publique

    Lorsqu’un paiement est confirmé, une facture PDF est générée et envoyée par email.

    Un mini-récapitulatif SMS est envoyé si le numéro de téléphone est renseigné.

    Une interface publique permet à tout utilisateur d’entrer une référence de transaction pour :

        Voir l’état actuel (en attente, payé, validé, rejeté…).

        Consulter ou régénérer une facture (envoyée uniquement par email utilisé lors de la soumission).

6. Support utilisateur par ticket

    Chaque transaction est liée à un unique ticket de support.

    Pour ouvrir ou accéder à un ticket :

        L’utilisateur saisit son email + numéro de transaction.

        Si correspondance trouvée, il accède au ticket et peut échanger avec le support.

    L’admin répond via l’interface admin.

    À la clôture du ticket, un email est envoyé à l’utilisateur avec un récapitulatif.

7. Gestion des pays et moyens de paiement dynamiquement

    Utilisation de l’API restcountries.com pour préremplir les informations d’un pays (nom, devise, drapeau, code, etc.).

    Possibilité de lier dynamiquement un ou plusieurs moyens de paiement à un pays depuis l’interface admin.

    Cela permet d’activer ou désactiver des moyens selon leur disponibilité dans le pays.

🏗️ Architecture Technique Proposée
⚙️ Backend

    Framework : Next.js (App Router) + API REST/GraphQL.

    ORM : Prisma ORM

    Base de données : MySQL

    Fonctionnalité supplémentaire :

        Synchronisation automatique de la structure de la base au démarrage.

        Logging avancé (pour audit).

        Gestion des rôles (admin, viewer, etc.).

🌐 Frontend

    Application en Next.js avec :

        Interface publique (front-office).

        Interface admin (dashboard back-office).

        Intégration Tailwind CSS pour le style.

        Librairies de visualisation (ex: Recharts, ApexCharts pour les soldes).

📡 Intégrations prévues

    Flutterwave (paiement automatique via API).

    Email service (ex: AWS SES, Sendinblue, Mailgun) pour les notifications et factures.

    SMS gateway (Twilio, Africa’s Talking…) pour les résumés SMS.

    restcountries.com pour automatiser les données pays.

🛠️ Autres exigences

    Support multilingue (FR / EN) dès la première version.

    Design adaptatif (mobile + desktop).

    Journalisation des actions utilisateurs et administrateurs (audit trail).

    Fonction de test pour simuler une transaction dans un environnement sandbox.

    Je veux que tu mette implément completement l'application basé sur ces spécificité. 
    l'applicaiton se nomme GIC CashTransfer appartement à l'entreprise GIC Promote LTD 