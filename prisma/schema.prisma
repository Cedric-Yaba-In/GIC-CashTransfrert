generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(191)
  password  String   @db.VarChar(191)
  role      UserRole @default(ADMIN)
  name      String   @db.VarChar(191)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  code      String   @unique @db.VarChar(50)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  countries Country[]

  @@map("regions")
}

model Country {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(191)
  code         String  @unique @db.VarChar(10)
  currency     String  @db.VarChar(100)
  currencyCode String  @db.VarChar(10)
  flag         String  @db.VarChar(191)
  callingCode  String? @db.VarChar(10)
  regionId     Int?
  active       Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  region Region? @relation(fields: [regionId], references: [id])
  paymentMethods CountryPaymentMethod[]
  wallet Wallet?
  senderTransactions Transaction[] @relation("SenderTransactions")
  receiverTransactions Transaction[] @relation("ReceiverTransactions")

  @@map("countries")
}

model PaymentMethod {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(191)
  type        PaymentMethodType
  minAmount   Decimal           @default(0)
  maxAmount   Decimal?
  active      Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  countries CountryPaymentMethod[]
  senderTransactions Transaction[] @relation("SenderPaymentTransactions")
  receiverTransactions Transaction[] @relation("ReceiverPaymentTransactions")

  @@map("payment_methods")
}

model Transaction {
  id                    Int               @id @default(autoincrement())
  reference             String            @unique @db.VarChar(100)
  senderName            String            @db.VarChar(191)
  senderEmail           String            @db.VarChar(191)
  senderPhone           String            @db.VarChar(50)
  senderCountryId       Int
  receiverName          String            @db.VarChar(191)
  receiverEmail         String?           @db.VarChar(191)
  receiverPhone         String            @db.VarChar(50)
  receiverCountryId     Int
  amount                Decimal
  fees                  Decimal           @default(0)
  totalAmount           Decimal
  senderPaymentMethodId Int
  receiverPaymentMethodId Int?
  status                TransactionStatus @default(PENDING)
  paymentProof          String?           @db.VarChar(191)
  adminNotes            String?           @db.Text
  sentAt                DateTime?
  receivedAt            DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  senderCountry         Country           @relation("SenderTransactions", fields: [senderCountryId], references: [id])
  receiverCountry       Country           @relation("ReceiverTransactions", fields: [receiverCountryId], references: [id])
  senderPaymentMethod   PaymentMethod     @relation("SenderPaymentTransactions", fields: [senderPaymentMethodId], references: [id])
  receiverPaymentMethod PaymentMethod?    @relation("ReceiverPaymentTransactions", fields: [receiverPaymentMethodId], references: [id])
  tickets               Ticket[]

  @@map("transactions")
}

model CountryPaymentMethod {
  id              Int     @id @default(autoincrement())
  countryId       Int
  paymentMethodId Int
  active          Boolean @default(true)
  minAmount       Decimal?
  maxAmount       Decimal?
  fees            Decimal @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  country       Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  subWallet     SubWallet?

  @@unique([countryId, paymentMethodId])
  @@map("country_payment_methods")
}

model Wallet {
  id        Int      @id @default(autoincrement())
  countryId Int      @unique
  balance   Decimal  @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country    Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  subWallets SubWallet[]

  @@map("wallets")
}

model SubWallet {
  id                      Int     @id @default(autoincrement())
  walletId                Int
  countryPaymentMethodId  Int     @unique
  balance                 Decimal @default(0)
  active                  Boolean @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  wallet                Wallet                @relation(fields: [walletId], references: [id], onDelete: Cascade)
  countryPaymentMethod  CountryPaymentMethod  @relation(fields: [countryPaymentMethodId], references: [id], onDelete: Cascade)

  @@map("sub_wallets")
}

model Configuration {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(100)
  value     String?  @db.Text
  category  String   @db.VarChar(50)
  type      String   @db.VarChar(20)
  label     String   @db.VarChar(191)
  required  Boolean  @default(false)
  encrypted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configurations")
}

enum UserRole {
  ADMIN
  VIEWER
}

enum PaymentMethodType {
  API
  MANUAL
  FLUTTERWAVE
  MOBILE_MONEY
  BANK_TRANSFER
}

enum TransactionStatus {
  PENDING
  PAID
  APPROVED
  REJECTED
  COMPLETED
  FAILED
}

model Ticket {
  id            Int         @id @default(autoincrement())
  transactionId Int?
  subject       String      @db.VarChar(191)
  message       String?     @db.Text
  status        TicketStatus @default(OPEN)
  priority      TicketPriority @default(NORMAL)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  transaction   Transaction? @relation(fields: [transactionId], references: [id])

  @@map("tickets")
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  PASSWORD
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}